#ifndef CONTOUR_TEMPLATE_MATCHER_ROS_H_
#define CONTOUR_TEMPLATE_MATCHER_ROS_H_

#include <ros/ros.h>
#include <mcr_contour_matching/contour_template_matcher.h>
#include <image_transport/image_transport.h>
#include <tf/transform_broadcaster.h>
#include <mcr_perception_msgs/PointCloud2List.h>
#include <std_msgs/String.h>

/**
 * ROS interface for contour template matcher
 * Subscribes to:
 *  -contour pointclouds: contour pointclouds generated by ContourFinder
 *  -template pointcloud: template pointcloud that is to be matched
 *
 * Publishes:
 *  -contour: best matched contour pointcloud and matching error in the form of an mcr_perception_msgs/Cavity message
 */
class ContourTemplateMatcherROS
{
public:
    /**
     * Constructor
     */
    ContourTemplateMatcherROS();
    /**
     * Destructor
     */
    virtual ~ContourTemplateMatcherROS();

    /**
     * If contour pointclouds and template filename have been received, matchContours function is called
     * This function can be called once or periodically.
     */
    void update();


private:
    /**
     * Copy constructor.
     */
    ContourTemplateMatcherROS(const ContourTemplateMatcherROS &other);

    /**
     * Copy assignment operator.
     */
    ContourTemplateMatcherROS &operator=(ContourTemplateMatcherROS other);

    /**
     * Callback for contour pointclouds as PointCloud2List
     *
     * @param msg
     *          mcr_perception_msgs::PointCloud2List message containing contours
     */
    void contourPointcloudsCallback(const mcr_perception_msgs::PointCloud2List::Ptr &msg);

    /**
     * Callback for full path of template PCD file
     *
     * @param msg
     *          sensor_msgs::PointCloud2 msg containing the template pointcloud
     */
    void templatePointcloudCallback(const sensor_msgs::PointCloud2::Ptr &msg);

    /**
     * Finds the contour that best matches the given template pointcloud
     * Publishes the best matching contour and the match error
     */
    void matchContours();


private:
    /**
     * ContourTemplateMatcher object
     */
    ContourTemplateMatcher contour_template_matcher_;

    /**
     * Subscriber for contour pointclouds
     */
    ros::Subscriber sub_contour_pointclouds_;

    /**
     * Subscriber for template pointcloud
     */
    ros::Subscriber sub_template_pointcloud_;

    /**
     * Publisher for matching error
     */
    ros::Publisher pub_matching_error_;

    /**
     * Publisher for matched contour
     */
    ros::Publisher pub_contour_pointcloud_;

    /**
     * Used to store template pointcloud message
     */
    sensor_msgs::PointCloud2::Ptr template_pointcloud_msg_;

    /**
     * Used to store contour pointclouds message
     */
    mcr_perception_msgs::PointCloud2List::Ptr contours_msg_;

    /**
     * Flag to indicate if contours have been received
     */
    bool contours_msg_received_;

    /**
     * Flag to indicate if template pointcloud has been received
     */
    bool template_pointcloud_msg_received_;
};

#endif
